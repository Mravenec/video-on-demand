/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.videos.tables;


import com.tuprimernegocio.library.database.jooq.users.tables.Users;
import com.tuprimernegocio.library.database.jooq.videos.Indexes;
import com.tuprimernegocio.library.database.jooq.videos.Keys;
import com.tuprimernegocio.library.database.jooq.videos.Videos;
import com.tuprimernegocio.library.database.jooq.videos.tables.records.UserVideoWatchedRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserVideoWatched extends TableImpl<UserVideoWatchedRecord> {

    private static final long serialVersionUID = -543234258;

    /**
     * The reference instance of <code>videos.user_video_watched</code>
     */
    public static final UserVideoWatched USER_VIDEO_WATCHED = new UserVideoWatched();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserVideoWatchedRecord> getRecordType() {
        return UserVideoWatchedRecord.class;
    }

    /**
     * The column <code>videos.user_video_watched.user_id</code>.
     */
    public final TableField<UserVideoWatchedRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>videos.user_video_watched.video_id</code>.
     */
    public final TableField<UserVideoWatchedRecord, Integer> VIDEO_ID = createField(DSL.name("video_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>videos.user_video_watched.watched</code>.
     */
    public final TableField<UserVideoWatchedRecord, Byte> WATCHED = createField(DSL.name("watched"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>videos.user_video_watched</code> table reference
     */
    public UserVideoWatched() {
        this(DSL.name("user_video_watched"), null);
    }

    /**
     * Create an aliased <code>videos.user_video_watched</code> table reference
     */
    public UserVideoWatched(String alias) {
        this(DSL.name(alias), USER_VIDEO_WATCHED);
    }

    /**
     * Create an aliased <code>videos.user_video_watched</code> table reference
     */
    public UserVideoWatched(Name alias) {
        this(alias, USER_VIDEO_WATCHED);
    }

    private UserVideoWatched(Name alias, Table<UserVideoWatchedRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserVideoWatched(Name alias, Table<UserVideoWatchedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserVideoWatched(Table<O> child, ForeignKey<O, UserVideoWatchedRecord> key) {
        super(child, key, USER_VIDEO_WATCHED);
    }

    @Override
    public Schema getSchema() {
        return Videos.VIDEOS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_VIDEO_WATCHED_PRIMARY, Indexes.USER_VIDEO_WATCHED_VIDEO_ID);
    }

    @Override
    public UniqueKey<UserVideoWatchedRecord> getPrimaryKey() {
        return Keys.KEY_USER_VIDEO_WATCHED_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserVideoWatchedRecord>> getKeys() {
        return Arrays.<UniqueKey<UserVideoWatchedRecord>>asList(Keys.KEY_USER_VIDEO_WATCHED_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserVideoWatchedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserVideoWatchedRecord, ?>>asList(Keys.USER_VIDEO_WATCHED_IBFK_1, Keys.USER_VIDEO_WATCHED_IBFK_2);
    }

    public Users users() {
        return new Users(this, Keys.USER_VIDEO_WATCHED_IBFK_1);
    }

    public com.tuprimernegocio.library.database.jooq.videos.tables.Videos videos() {
        return new com.tuprimernegocio.library.database.jooq.videos.tables.Videos(this, Keys.USER_VIDEO_WATCHED_IBFK_2);
    }

    @Override
    public UserVideoWatched as(String alias) {
        return new UserVideoWatched(DSL.name(alias), this);
    }

    @Override
    public UserVideoWatched as(Name alias) {
        return new UserVideoWatched(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserVideoWatched rename(String name) {
        return new UserVideoWatched(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserVideoWatched rename(Name name) {
        return new UserVideoWatched(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
