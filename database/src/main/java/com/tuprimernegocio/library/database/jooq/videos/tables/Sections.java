/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.videos.tables;


import com.tuprimernegocio.library.database.jooq.users.tables.Users;
import com.tuprimernegocio.library.database.jooq.videos.Indexes;
import com.tuprimernegocio.library.database.jooq.videos.Keys;
import com.tuprimernegocio.library.database.jooq.videos.Videos;
import com.tuprimernegocio.library.database.jooq.videos.tables.records.SectionsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sections extends TableImpl<SectionsRecord> {

    private static final long serialVersionUID = -662613206;

    /**
     * The reference instance of <code>videos.sections</code>
     */
    public static final Sections SECTIONS = new Sections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SectionsRecord> getRecordType() {
        return SectionsRecord.class;
    }

    /**
     * The column <code>videos.sections.id</code>.
     */
    public final TableField<SectionsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>videos.sections.name</code>.
     */
    public final TableField<SectionsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>videos.sections.added_by</code>.
     */
    public final TableField<SectionsRecord, Integer> ADDED_BY = createField(DSL.name("added_by"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>videos.sections.is_active</code>.
     */
    public final TableField<SectionsRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>videos.sections.sequence_number</code>.
     */
    public final TableField<SectionsRecord, Integer> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>videos.sections.created_at</code>.
     */
    public final TableField<SectionsRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>videos.sections</code> table reference
     */
    public Sections() {
        this(DSL.name("sections"), null);
    }

    /**
     * Create an aliased <code>videos.sections</code> table reference
     */
    public Sections(String alias) {
        this(DSL.name(alias), SECTIONS);
    }

    /**
     * Create an aliased <code>videos.sections</code> table reference
     */
    public Sections(Name alias) {
        this(alias, SECTIONS);
    }

    private Sections(Name alias, Table<SectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sections(Name alias, Table<SectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sections(Table<O> child, ForeignKey<O, SectionsRecord> key) {
        super(child, key, SECTIONS);
    }

    @Override
    public Schema getSchema() {
        return Videos.VIDEOS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SECTIONS_ADDED_BY, Indexes.SECTIONS_NAME, Indexes.SECTIONS_PRIMARY);
    }

    @Override
    public Identity<SectionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SECTIONS;
    }

    @Override
    public UniqueKey<SectionsRecord> getPrimaryKey() {
        return Keys.KEY_SECTIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SectionsRecord>> getKeys() {
        return Arrays.<UniqueKey<SectionsRecord>>asList(Keys.KEY_SECTIONS_PRIMARY, Keys.KEY_SECTIONS_NAME);
    }

    @Override
    public List<ForeignKey<SectionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SectionsRecord, ?>>asList(Keys.SECTIONS_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.SECTIONS_IBFK_1);
    }

    @Override
    public Sections as(String alias) {
        return new Sections(DSL.name(alias), this);
    }

    @Override
    public Sections as(Name alias) {
        return new Sections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sections rename(String name) {
        return new Sections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sections rename(Name name) {
        return new Sections(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, Byte, Integer, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
