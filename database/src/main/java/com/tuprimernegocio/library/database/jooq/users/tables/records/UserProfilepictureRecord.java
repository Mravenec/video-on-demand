/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.users.tables.records;


import com.tuprimernegocio.library.database.jooq.users.tables.UserProfilepicture;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfilepictureRecord extends UpdatableRecordImpl<UserProfilepictureRecord> implements Record2<Integer, byte[]> {

    private static final long serialVersionUID = 802071102;

    /**
     * Setter for <code>users.user_profilePicture.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>users.user_profilePicture.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>users.user_profilePicture.profile_picture</code>.
     */
    public void setProfilePicture(byte... value) {
        set(1, value);
    }

    /**
     * Getter for <code>users.user_profilePicture.profile_picture</code>.
     */
    public byte[] getProfilePicture() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return UserProfilepicture.USER_PROFILEPICTURE.USER_ID;
    }

    @Override
    public Field<byte[]> field2() {
        return UserProfilepicture.USER_PROFILEPICTURE.PROFILE_PICTURE;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public byte[] component2() {
        return getProfilePicture();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public byte[] value2() {
        return getProfilePicture();
    }

    @Override
    public UserProfilepictureRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserProfilepictureRecord value2(byte... value) {
        setProfilePicture(value);
        return this;
    }

    @Override
    public UserProfilepictureRecord values(Integer value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserProfilepictureRecord
     */
    public UserProfilepictureRecord() {
        super(UserProfilepicture.USER_PROFILEPICTURE);
    }

    /**
     * Create a detached, initialised UserProfilepictureRecord
     */
    public UserProfilepictureRecord(Integer userId, byte[] profilePicture) {
        super(UserProfilepicture.USER_PROFILEPICTURE);

        set(0, userId);
        set(1, profilePicture);
    }
}
