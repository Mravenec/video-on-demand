/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.users.tables;


import com.tuprimernegocio.library.database.jooq.users.Indexes;
import com.tuprimernegocio.library.database.jooq.users.Keys;
import com.tuprimernegocio.library.database.jooq.users.Users;
import com.tuprimernegocio.library.database.jooq.users.tables.records.PhonesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phones extends TableImpl<PhonesRecord> {

    private static final long serialVersionUID = -1655212603;

    /**
     * The reference instance of <code>users.phones</code>
     */
    public static final Phones PHONES = new Phones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhonesRecord> getRecordType() {
        return PhonesRecord.class;
    }

    /**
     * The column <code>users.phones.user_id</code>.
     */
    public final TableField<PhonesRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>users.phones.whatsapp</code>.
     */
    public final TableField<PhonesRecord, String> WHATSAPP = createField(DSL.name("whatsapp"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>users.phones.other_numbers</code>.
     */
    public final TableField<PhonesRecord, String> OTHER_NUMBERS = createField(DSL.name("other_numbers"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>users.phones</code> table reference
     */
    public Phones() {
        this(DSL.name("phones"), null);
    }

    /**
     * Create an aliased <code>users.phones</code> table reference
     */
    public Phones(String alias) {
        this(DSL.name(alias), PHONES);
    }

    /**
     * Create an aliased <code>users.phones</code> table reference
     */
    public Phones(Name alias) {
        this(alias, PHONES);
    }

    private Phones(Name alias, Table<PhonesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phones(Name alias, Table<PhonesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Phones(Table<O> child, ForeignKey<O, PhonesRecord> key) {
        super(child, key, PHONES);
    }

    @Override
    public Schema getSchema() {
        return Users.USERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHONES_PRIMARY);
    }

    @Override
    public UniqueKey<PhonesRecord> getPrimaryKey() {
        return Keys.KEY_PHONES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PhonesRecord>> getKeys() {
        return Arrays.<UniqueKey<PhonesRecord>>asList(Keys.KEY_PHONES_PRIMARY);
    }

    @Override
    public List<ForeignKey<PhonesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PhonesRecord, ?>>asList(Keys.PHONES_IBFK_1);
    }

    public com.tuprimernegocio.library.database.jooq.users.tables.Users users() {
        return new com.tuprimernegocio.library.database.jooq.users.tables.Users(this, Keys.PHONES_IBFK_1);
    }

    @Override
    public Phones as(String alias) {
        return new Phones(DSL.name(alias), this);
    }

    @Override
    public Phones as(Name alias) {
        return new Phones(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phones rename(String name) {
        return new Phones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phones rename(Name name) {
        return new Phones(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
