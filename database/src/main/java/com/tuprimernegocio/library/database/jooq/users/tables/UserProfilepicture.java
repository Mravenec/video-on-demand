/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.users.tables;


import com.tuprimernegocio.library.database.jooq.users.Indexes;
import com.tuprimernegocio.library.database.jooq.users.Keys;
import com.tuprimernegocio.library.database.jooq.users.Users;
import com.tuprimernegocio.library.database.jooq.users.tables.records.UserProfilepictureRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfilepicture extends TableImpl<UserProfilepictureRecord> {

    private static final long serialVersionUID = -1748088256;

    /**
     * The reference instance of <code>users.user_profilePicture</code>
     */
    public static final UserProfilepicture USER_PROFILEPICTURE = new UserProfilepicture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProfilepictureRecord> getRecordType() {
        return UserProfilepictureRecord.class;
    }

    /**
     * The column <code>users.user_profilePicture.user_id</code>.
     */
    public final TableField<UserProfilepictureRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>users.user_profilePicture.profile_picture</code>.
     */
    public final TableField<UserProfilepictureRecord, byte[]> PROFILE_PICTURE = createField(DSL.name("profile_picture"), org.jooq.impl.SQLDataType.BLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BLOB)), this, "");

    /**
     * Create a <code>users.user_profilePicture</code> table reference
     */
    public UserProfilepicture() {
        this(DSL.name("user_profilePicture"), null);
    }

    /**
     * Create an aliased <code>users.user_profilePicture</code> table reference
     */
    public UserProfilepicture(String alias) {
        this(DSL.name(alias), USER_PROFILEPICTURE);
    }

    /**
     * Create an aliased <code>users.user_profilePicture</code> table reference
     */
    public UserProfilepicture(Name alias) {
        this(alias, USER_PROFILEPICTURE);
    }

    private UserProfilepicture(Name alias, Table<UserProfilepictureRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProfilepicture(Name alias, Table<UserProfilepictureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserProfilepicture(Table<O> child, ForeignKey<O, UserProfilepictureRecord> key) {
        super(child, key, USER_PROFILEPICTURE);
    }

    @Override
    public Schema getSchema() {
        return Users.USERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PROFILEPICTURE_PRIMARY);
    }

    @Override
    public UniqueKey<UserProfilepictureRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROFILEPICTURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserProfilepictureRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProfilepictureRecord>>asList(Keys.KEY_USER_PROFILEPICTURE_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserProfilepictureRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserProfilepictureRecord, ?>>asList(Keys.USER_PROFILEPICTURE_IBFK_1);
    }

    public com.tuprimernegocio.library.database.jooq.users.tables.Users users() {
        return new com.tuprimernegocio.library.database.jooq.users.tables.Users(this, Keys.USER_PROFILEPICTURE_IBFK_1);
    }

    @Override
    public UserProfilepicture as(String alias) {
        return new UserProfilepicture(DSL.name(alias), this);
    }

    @Override
    public UserProfilepicture as(Name alias) {
        return new UserProfilepicture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfilepicture rename(String name) {
        return new UserProfilepicture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfilepicture rename(Name name) {
        return new UserProfilepicture(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
