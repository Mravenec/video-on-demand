/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.email_config.tables;


import com.tuprimernegocio.library.database.jooq.email_config.Indexes;
import com.tuprimernegocio.library.database.jooq.email_config.Keys;
import com.tuprimernegocio.library.database.jooq.email_config.tables.records.EmailConfigRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailConfig extends TableImpl<EmailConfigRecord> {

    private static final long serialVersionUID = 1774120186;

    /**
     * The reference instance of <code>email_config.email_config</code>
     */
    public static final EmailConfig EMAIL_CONFIG_ = new EmailConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailConfigRecord> getRecordType() {
        return EmailConfigRecord.class;
    }

    /**
     * The column <code>email_config.email_config.id</code>.
     */
    public final TableField<EmailConfigRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>email_config.email_config.host</code>.
     */
    public final TableField<EmailConfigRecord, byte[]> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARBINARY(255).nullable(false), this, "");

    /**
     * The column <code>email_config.email_config.port</code>.
     */
    public final TableField<EmailConfigRecord, byte[]> PORT = createField(DSL.name("port"), org.jooq.impl.SQLDataType.VARBINARY(255).nullable(false), this, "");

    /**
     * The column <code>email_config.email_config.username</code>.
     */
    public final TableField<EmailConfigRecord, byte[]> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARBINARY(255).nullable(false), this, "");

    /**
     * The column <code>email_config.email_config.password</code>.
     */
    public final TableField<EmailConfigRecord, byte[]> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARBINARY(255).nullable(false), this, "");

    /**
     * The column <code>email_config.email_config.smtp_auth</code>.
     */
    public final TableField<EmailConfigRecord, Byte> SMTP_AUTH = createField(DSL.name("smtp_auth"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>email_config.email_config.starttls_enabled</code>.
     */
    public final TableField<EmailConfigRecord, Byte> STARTTLS_ENABLED = createField(DSL.name("starttls_enabled"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>email_config.email_config</code> table reference
     */
    public EmailConfig() {
        this(DSL.name("email_config"), null);
    }

    /**
     * Create an aliased <code>email_config.email_config</code> table reference
     */
    public EmailConfig(String alias) {
        this(DSL.name(alias), EMAIL_CONFIG_);
    }

    /**
     * Create an aliased <code>email_config.email_config</code> table reference
     */
    public EmailConfig(Name alias) {
        this(alias, EMAIL_CONFIG_);
    }

    private EmailConfig(Name alias, Table<EmailConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailConfig(Name alias, Table<EmailConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmailConfig(Table<O> child, ForeignKey<O, EmailConfigRecord> key) {
        super(child, key, EMAIL_CONFIG_);
    }

    @Override
    public Schema getSchema() {
        return com.tuprimernegocio.library.database.jooq.email_config.EmailConfig.EMAIL_CONFIG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_CONFIG_PRIMARY);
    }

    @Override
    public Identity<EmailConfigRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMAIL_CONFIG_;
    }

    @Override
    public UniqueKey<EmailConfigRecord> getPrimaryKey() {
        return Keys.KEY_EMAIL_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmailConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailConfigRecord>>asList(Keys.KEY_EMAIL_CONFIG_PRIMARY);
    }

    @Override
    public EmailConfig as(String alias) {
        return new EmailConfig(DSL.name(alias), this);
    }

    @Override
    public EmailConfig as(Name alias) {
        return new EmailConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailConfig rename(String name) {
        return new EmailConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailConfig rename(Name name) {
        return new EmailConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, byte[], byte[], byte[], byte[], Byte, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
