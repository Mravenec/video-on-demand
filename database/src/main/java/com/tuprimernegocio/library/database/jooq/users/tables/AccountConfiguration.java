/*
 * This file is generated by jOOQ.
 */
package com.tuprimernegocio.library.database.jooq.users.tables;


import com.tuprimernegocio.library.database.jooq.users.Indexes;
import com.tuprimernegocio.library.database.jooq.users.Keys;
import com.tuprimernegocio.library.database.jooq.users.Users;
import com.tuprimernegocio.library.database.jooq.users.tables.records.AccountConfigurationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountConfiguration extends TableImpl<AccountConfigurationRecord> {

    private static final long serialVersionUID = -2096362594;

    /**
     * The reference instance of <code>users.account_configuration</code>
     */
    public static final AccountConfiguration ACCOUNT_CONFIGURATION = new AccountConfiguration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountConfigurationRecord> getRecordType() {
        return AccountConfigurationRecord.class;
    }

    /**
     * The column <code>users.account_configuration.id</code>.
     */
    public final TableField<AccountConfigurationRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>users.account_configuration.key</code>.
     */
    public final TableField<AccountConfigurationRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>users.account_configuration.value</code>.
     */
    public final TableField<AccountConfigurationRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>users.account_configuration.type</code>.
     */
    public final TableField<AccountConfigurationRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * Create a <code>users.account_configuration</code> table reference
     */
    public AccountConfiguration() {
        this(DSL.name("account_configuration"), null);
    }

    /**
     * Create an aliased <code>users.account_configuration</code> table reference
     */
    public AccountConfiguration(String alias) {
        this(DSL.name(alias), ACCOUNT_CONFIGURATION);
    }

    /**
     * Create an aliased <code>users.account_configuration</code> table reference
     */
    public AccountConfiguration(Name alias) {
        this(alias, ACCOUNT_CONFIGURATION);
    }

    private AccountConfiguration(Name alias, Table<AccountConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountConfiguration(Name alias, Table<AccountConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountConfiguration(Table<O> child, ForeignKey<O, AccountConfigurationRecord> key) {
        super(child, key, ACCOUNT_CONFIGURATION);
    }

    @Override
    public Schema getSchema() {
        return Users.USERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_CONFIGURATION_ACCOUNT_CONFIGURATION_UQ1, Indexes.ACCOUNT_CONFIGURATION_PRIMARY);
    }

    @Override
    public Identity<AccountConfigurationRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_CONFIGURATION;
    }

    @Override
    public UniqueKey<AccountConfigurationRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_CONFIGURATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountConfigurationRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountConfigurationRecord>>asList(Keys.KEY_ACCOUNT_CONFIGURATION_PRIMARY, Keys.KEY_ACCOUNT_CONFIGURATION_ACCOUNT_CONFIGURATION_UQ1);
    }

    @Override
    public AccountConfiguration as(String alias) {
        return new AccountConfiguration(DSL.name(alias), this);
    }

    @Override
    public AccountConfiguration as(Name alias) {
        return new AccountConfiguration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountConfiguration rename(String name) {
        return new AccountConfiguration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountConfiguration rename(Name name) {
        return new AccountConfiguration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
